import javax.xml.crypto.Data;
import java.io.File;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.lang.Math;


public class Main201559663{

    public static ArrayList ReadData(String pathname) {
        ArrayList strlist = new ArrayList();
        try {

            File filename = new File(pathname);
            InputStreamReader reader = new InputStreamReader(
                    new FileInputStream(filename));
            BufferedReader br = new BufferedReader(reader);
            int j=0;
            String line ="";
            while ((line = br.readLine()) != null) {
                strlist.add(line);
            }
            return strlist;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strlist;
    }

    public static ArrayList DataWash(ArrayList Datalist){
        ArrayList AIS = new ArrayList();
        ArrayList IS =new ArrayList();
        for (int i =0; i<Datalist.size();i++){
            String Tstr= (String)Datalist.get(i);
            if (Tstr.equals("A") == false){
                IS.add(Integer.parseInt(Tstr));
            }
            if (Tstr.equals("A")){
                AIS.add(IS.clone());
                IS.clear();
            }
        }
        return AIS;
    }

    public static int SquareGrouping(int[] A, int n, int k){

        int[][] new_A = new int[n + 1][k + 1];     // creates new 2D int array of n+1 rows and k+1 columns
        int[] presum = new int[n + 1];       // creates new int array with n+1 elements

        // base case
        // iterates over rows of new_A (i=1 to i=n)
        // for each i, sets value to be sum of first i numbers squared
        for (int i = 1; i <= n; i++) {
            presum[i] = presum[i - 1] + A[i - 1];
            new_A[i][1] = presum[i] * presum[i];
        }

        // iterates over columns of new_A (j=2 to j=k)
        // for each j, iterates over row of new_A (i=2 to i=n)
        // for each i and j, computes minimum value by trying all cutting positions
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                new_A[i][j] = Integer.MAX_VALUE;        // largest possible int
                for (int x = 1; x < i; x++) {       // x = index of split (see above comment section)
                    new_A[i][j] = Math.min(new_A[i][j], new_A[x][j - 1] + (presum[i] - presum[x]) * (presum[i] - presum[x]));
                }       // new_A updated at each iteration
            }
        }

        return new_A[n][k];         // return objective value of optimal solutions
    }

    public static int Computation(ArrayList Instance, int opt){
        int NGounp = 0;
        int size = 0;
        int Correct = 0;
        size = Instance.size();
        int [] A = new int[size-opt];
        // NGounp = Integer.parseInt((String)Instance.get(0));
        NGounp = (Integer)Instance.get(0);
        for (int i = opt; i< size;i++ ){
            A[i-opt] = (Integer)Instance.get(i);
        }
        int Size =A.length;
        if (NGounp >Size ){
            return (-1);
        }
        else {
            int R = SquareGrouping(A, Size, NGounp);
            return(R);
        }
    }

    public static String Test;

    public static void main(String[] args) {
        Test = args[0];
        int opt = 2;
        String pathname = "data2.txt";
        if (Test.equals("-opt1")) {
            opt = 1;
            pathname = "data1.txt";
        }
        ArrayList Datalist = new ArrayList();
        Datalist = ReadData(pathname);
        ArrayList AIS = DataWash(Datalist);

        int Nins = AIS.size();
        int NGounp = 0;
        int size = 0;
        if (Test.equals("-opt1")) {
            for (int t = 0; t < Nins; t++) {
                int Correct = 0;
                int Result = 0;
                ArrayList Instance = (ArrayList) AIS.get(t);
                Result = Computation(Instance, opt);
                System.out.println(Result);
            }
        }
        else {
            int wrong_no = 0;
            int Correct = 0;
            int Result = 0;
            ArrayList Wrong = new ArrayList();
            for (int t = 0; t < Nins; t++) {
                ArrayList Instance = (ArrayList) AIS.get(t);
                Result = Computation(Instance, opt);
                System.out.println(Result);
                Correct = (Integer) Instance.get(1);
                if (Correct != Result) {
		    Wrong.add(t+1);
                    //Wrong.add(Instance);
                    wrong_no=wrong_no+1;
                }
            }
            if (Wrong.size() > 0) {System.out.println("Index of wrong instance(s):");}
            for (int j = 0; j < Wrong.size(); j++) {
		System.out.print(Wrong.get(j));
                System.out.print(",");
            }
            System.out.println("");
            System.out.println("Percentage of correct answers:");
            System.out.println(((double)(Nins-wrong_no) / (double)Nins)*100);

        }

    }
}
